프로세스의 개념
	프로세스(=job) : 실행중인 프로그램
	프로세스의 문맥(context) : 프로세스가 현재 어떤 상태에서 수행되고 있는지 정확히 규명하기 위한 정보
				ex) 프로세스의 주소공간(코드,데이터,스택 상태), 레지스터의 값,시스템콜을 통해 커널에서 수행한일의 상태,
				     커널이 관리하고 있는 정보등등
		여러 프로세스와 수행되는 시분할 시스템 환경에서는 타이머 인터럽트로 각각의 프로세스 짧은 시간동안 CPU제어권을 소유하기 때문에
		CPU를 다시 얻었을 때 이전 수행 시점의 정확한 상태를 재현해야함. 이때 재현에 필요한 정보가 프로세스의 문맥임
	크게 3가지 -> 하드웨어문맥, 프로세스 주소공간, 커널상의 문맥
		하드웨어 문맥 : CPU의 수행상태(프로그램 카운터값,레지스터에 저장된값)
		프로세스 주소공간: 각각의 프로세스가 독자적인 주소공간을 가지고 있음
		커널상의 문맥 : 운영체제가 프로세스를 관리하기 위한 자료구조인 PCB와 커널스택

							프로세스 종료
						┌ㅡㅡㅡㅡㅡㅡㅡ>ㅡㅡㅡㅡㅡㅡ>┐
프로세스의 상태 : 시작(new), -> 준비(ready) ↔ 실행(running) -> 봉쇄(blocked,wait,sleep), 종료(terminate)			
				└------<--------------<-----┘
				      입출력등 작업완료
	시작 : 프로세스가 시작되고 수행을 위한 각종 자료구조는 생성되었지만 메모리 획득을 승인 받지 못한 상태
	준비 : 프로세스가 CPU를 받으면 바로 실행할 수 있지만 할당받지 못한 상태
	실행 : 프로세스가 CPU를 보유하고 기계어 명령을 실행하고 있는 상태
	봉쇄 : 프로세스가 CPU를 할당받더라도 명령을 실행할 수 없는 상태
	종료 : 프로세스가 종료되었으나 해당 프로세스와 관련된 자료구조를 완전히 정리하지 못한 상태

	문맥교환 : 실행시킬 프로세스를 변경하기 위해 A프로세스의문맥을 저장하고 새로운 프로세스의 문맥을 세팅하는 과정
			->입출력 인터럽트를 받아 봉쇄상태인 경우도 같이 해당됨

	CPU 디스패치(dispatch) : 준비 상태인 프로세스가 간택당해 실제로 CPU제어권을 넘겨받는 과정	

	ex1) 타이머 인터럽트를 받는 경우
		A프로세스 실행 -> 타이머 인터럽트 
		-> CPU 운영체제에 이양 타이머 인터럽트 처리루틴으로 이동 A프로세스의 문맥 저장 및 준비 상태 프로세스중 다음 실행될 프로세스 선택
		-> A프로세스 준비상태로 -> 선택된 프로세스 실행상태로

	ex2) 입출력 인터럽트를 받는 경우
		A프로세스 실행 -> 시스템 콜 -> A프로세스 봉쇄상태 -> B프로세스와 문맥교환 -> B프로세스 실행----------------------------------------------------
					ㄴA프로세스 디스크 입출력 큐에서 대기 -> 디스크 컨트롤러 부터 서비스를 받음 -> 디스크 컨트롤러가 인터럽트발생
		===============================================================================================
		-> CPU B프로세스에서 운영체제로 이양 -> B프로세스 커널 모드 실행 상태 -> 디스크 인터럽트 처리(운영체제가 A프로세스 상태를 준비로 바꾸고 로컬버퍼에 있는 내용 메모리로 이동 )
							ㄴ B프로세스 입장에서 본인과 무관한 인터럽트지만 편의상 B에서 실행하는걸로 간주
		==================================================================================================
		-> 디스크 인터럽트 처리가 끝난 후 CPU 소유는 CPU 스케쥴리에 따라 달라짐

프로세스의 제어블록(PCB) : 운영체제가 시스템내의 프로세스들을 관리하기 위해 프로세스마다 유지하는 정보들을 담는 커널 내의 자료구조
	프로세스의 상태 : CPU를 할당해도 되는지에 대한 여부를 결정하기 위한 정보 -운영체제가 관리
	프로그램 카운터의 값 : 다음에 수행할 명령의 위치 - 운영체제가 관리
	CPU 레지스터의 값 : CPU 연산을 위해 현 시점의 레지스터에 어떤 값을 저장하는지- cpu 수행 관련 하드웨어 값
	CPU 스케쥴링 정보 : 프로세스의 CPU 스케쥴링을 위한정보 - 운영체제가 관리
	메모리 관리 정보 : 프로세스의 메모리 할당을 위한 정보 - 메모리 관련
	자원 사용 정보 : 사용자에게 자원 사용 요금을 계산해 청구하는 용도
	입출력 상태 정보 : 프로세스가 열람한 파일 정보 등 입출력 관련 상태 정보 - 파일 관련

문맥교환 : 다른 사용자 프로세스로 CPU의 제어권이 이양되는 과정	
	cf) 타이머 인터럽트로 실행되는 프로세스가 바뀌거나, 입출력 요청 시스템 콜로 인해 봉쇄상태에 들어가는 경우 문맥교환이 발생하지만, 
		그 외의 인터럽트나 시스템콜은 문맥교환이 일어나지 않고 실행 모드만 사용자모드에서 커널모드로 바뀔 뿐이다(->너무 많은 오버헤드(Overhead)가 발생하지 않도록)
	
	오버헤드 : 어떤 처리를 하기위해 간접적으로 들어가는 간접적 시간
	cf) 타이머 시간이 너무 짧으면 과도한 오버헤드 발생, 타이머 시간이 너무 길면 시분할 시스템의 의미가 퇴색 -> 적절한 타이머(CPU 할당시간) 필요

프로세스를 스케줄링하기 위한 큐 : 
	준비 큐 : 운영체제가 준비 상태의 프로세스를 줄을 세워 순서를 기다리게 함 -> 줄을 서는 방법은 CPU 스케쥴링에 따라 다름
	장치 큐 : 운영체제가 봉쇄 상태의 프로세스를 줄을 세워 순서를 기다리게 함
		하드웨어 자원 : 특정 자원을 기다리는 프로세스 대기 줄 ex) 디스크 입출력 큐 ,키보드 입출력 큐, 화면이나 프린터에 처리 결과 입출력 큐 
			ex) 디스크 입출력 완료 -> 디스크 컨트롤러 CPU에 인터럽트 발생 -> 인터럽트 처리루틴에 의해 입출력 완료된 프로세스 입츌력 큐에서 준비큐에 들어감
		소프트웨어 자원 :  공유데이터
			-> 접근 중인 프로세스가 다 사용하고 반납할 때까지는 다른 프로세스가 CPU를 할당 받았더라도 접근 못함	
				-> 데이터의 일관성을 위해 -> 큐를 통해 공유데이터가 필요한 프로세스들이 줄을 서게해 일관성을 유지

	작업 큐 : 운영체제가 시스템내에 있는 모든 프로세스가 작업 큐에 속함(프로세스의 상태와 무관하게)
			-> 준비큐, 장치 큐에 있는 프로세스들은 모두 작업큐에 속함

	큐 : 큐는 각 프로세스의 PCB를 연결 리스트 형태로 관리하며 포인터로 순서를 정함		








