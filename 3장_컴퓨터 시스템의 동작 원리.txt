캄퓨터 시스템의 구조

	내부장치 : CPU, 메모리
	외부장치(입출력장치) : 디스크,키보드,마우스,모니터,네트워크장치
	
	외부장치에서 내부장치로 데이터 읽음 -> 연산,기능 수행 -> 외부장치로 보냄
		input						output
		ㄴ 이를 입출력이라 함	

	컨트롤러 :  하드웨어 장치에 존재하며 제어하는 일종의 작은 CPU


CPU 연산과 I/O 연산

	CPU연산 : 메인 CPU 담당
	I/O연산 : 입출력 컨트롤러
		ㄴ 동시에 연산 가능

	로컬버퍼 : 장치 컨트롤러가 장치에서 입출력되는 데이터를 임시로 저장하기 위해 가지고있는 작은 메모리
		ex) 디스크,키보드등 데이터를 읽어오는 경우 로컬버퍼에 데이터 임시로 저장 -> 컨트롤러가 장치에서 로컬버퍼로 저장해줌
	
	ex) B 프로그램 디스크에서 데이터 읽어오라는 명령 -> 디스크 컨트롤러가 물리적인 디스크에서 내용을 읽어 로컬버퍼에 저장
		-> 컨트롤러가 인터럽트를 발생시켜 CPU에 보고 

		cf) cPU옆에는 인터럽트라인이 있음 -> CPU가 명령 하나를 수행할 때마다 인터러트 여부 파악 -> 미발생시 다음 명령 수행
										-> 발생시 다음 명령을 보류하고 인터럽트 처리
		

인터럽트의 일반적 기능

	인터럽트 처리 루틴 : 운영체제 커널에 인터럽트 발생 시 장치별 수행할 일을 저장해 놓은 루틴

	ex) 디스크 컨트롤러 인터럽트 발생 -> CPU가 해당 인터럽트 처리 루틴을 찾음 
		-> 수행하는 일은 디스크의 로컬버퍼 내용을 사용자 프로그램 메모리에 전달 후 해당 프로그램이 CPU를 할당 받을 경우
											다음 명령을 수행할 수 있음 표시

	하드웨어 인터럽트 : 컨트롤러 등 하드웨어 장치가 인터럽트 라인 세팅
	소프트웨어 인터럽트(=trap) :소프트웨어가 컨트롤러 역할을 함
	 ->CPU 서비스를 받는 방법은 둘다 동일함(CPU옆에 붙어 있는 인터럽트 라인에 신호를 줘서)

	인터럽트 벡터 : 인터럽트 종류마다 번호를 정해 처리해야할 코드가 위치하는 부분을 가르키는 자료구조
							ㄴ 인터럽트 처리 루린(interrupt service routine), 인터럽트 핸들러

	cf) 인터럽트 처리 후 원래 작업하던 일을 계속 수행하기 위해 수행 중이던 작업을 저장하기 위한 장소를 운영체제가 별도로 가지고있음
	
	Trap(소프트웨어 인터럽트) : 사용자 프로세스로부터 CPU의 제어권을 운영체제에 이양되어 처리 ex) 예외상황(exception), System call
		예외상황 : 비정상적인 작업(0으로 나누기) , 배정 받은 메모리 영역을 바깥으로 접근, 권한 없는 작업 시도
		시스템 콜 : 사용자 프로그램이 운영체제 내부에 정의된 코드를 실행하고 싶을때 운영체제 서비스를 요청하는 것
			ex) 사용자 프로그램에는 정의되지 않고 운영체제 커널에 있는 코드를 실행하려 할때 인터럽트 라인 세팅을 통해
											CPU제어권을 운영체제로 넘겨 실행
			ex) 어플 개발자가 키보드입력or 화면 출력 수행 할때 코드를 직접 작성하지 않고 커널의 코드 호출

인터럽트 핸들링 : 인터럽트가 발생한 경우에 처리 할 일의 절차를 의미함

	인터럽트 처리 전 CPU 상태 저장해야함
		CPU 상태 :  실행중인 명령의 메모리 주소 등 부가적인 정보를 의미
			CPU 명령이 실행 될때 CPU내부에 있는 임시 기억장치인 레지스터에 데이터를 읽거나 쓰면서 작업함
				-> 인터럽트 발생으로 새로운 명령을 실행하게 되면 기존의 레지스터를 지움
					-> 따라서 해당 레지스터의 정보(CPU 상태)를 PCB에 저장해야함

	PCB(Process Chain Block) : 운영체제가 현재 시스템 내에서 실행되는 프로그램을 관리하기 위한 자료구조
		각각의 프로그램마다 하나씩 존재하며 해당 프로그램의 실행 위치를 저장함
			-> 코드의 메모리 주소, 레지스터값, 하드웨어 상태등등 저장함

	현대의 운영체제 실행 조건 : 인터럽트가 발생했을 때만 운영체제가 실행됨
		CPU가 항상 사용자 프로그램에 의해 사용되고, 운영체제는 인터럽트가 발생했을 때만 CPU의 제어권을 획득함
			-> 인터럽트가 없다면 사용자 프로그램이 CPU를 계속 점유함

입출력 구조 : 입출력이란 컴퓨터 시스템이 컴퓨터 외부의 입출력 장치들과 데이터를 주고 받는것

	입출력 방식 : 동기식 입출력, 비동기식 입출력

	동기식 입출력: 프로그램이 입출력 요청시 해당 작업이 완료될때 까지 대기 후 후속작업을 진행함
		CPU 작업속도 보다 입출력 작업속도가 느림 -> CPU가 입출력 연산을 대기 할시 자원 낭비가 됨
		 -> 다른 프로그램(B)에 CPU를 할당해줌 -> 입출력 연산을 대기하는 프로그램은 봉쇄상태로 전환해 CPU를 할당하지 않음
		-> 입출력 연산 완료 통보를 인터럽트를 통해 수행 -> 운영체제 커널이 인터럽트 처리루틴으로 가서 봉쇄상태 해제
		-> 봉쇄상태가 해제 된 프로금의 경우 다시 CPU 대기 줄을 섬 -> B 작업이 끝나고 입출력연산 이후의 작업을 수행함		
	
		동기성(Synchronization) 보장 : 장치별로 큐를 두어 요청한 순서를 두어 처리
			ex) A 프로그램이 디스크에 1인 파일 내용을 3으로 바꾸는 입출력 연산 요청 -> B프로그램에 CPU할당
				-> B프로그램 같은 파일 내용을 +1 입출력 연산 요청 
				원래 목적 : 1-3-4
				B프로그램의 입출력연산이 빠를경우 : 1-2-3
				이를 방지하기 위해 디스크에 큐를 두어 A가 요청한 입출력 연산 부터 처리
		
	비동기식 입출력: 프로그램이 입출력 연산을 요청후 결과를 기다리지 않고 CPU제어권을 연산을 요청한 프로그램에 다시 부여
		요청한 입출력 연산의 결과의 데이터와 상관없이 수행할 수 있는 경우, 
		하지만 입출력 연산의 결과 데이터가 필요한 경우 입출력이 완료된 후에 수행
			ex) 데이터를 읽을 필요없고 쓰는경우

	cf) 운영체제에서는 주로 동기식 입출력 사용	

DMA(Direct Memory Access) : CPU 이외에 메모리 접근이 가능한 장치		
	원칙적으로 CPU 의외의 장치가 메모리에 접근하기 위해서는 컨트롤러가 인터럽트를 통해 이루어져야 한다.
	해당 작업 이후 CPU가 로컬버파와 메모리 사이에서 데이터를 옮겨 주지만, 모든 메모리 접근 연산이 CPU에 의해서만 이루어지면 CPU의 	처리능력 떨어져 DMA라는 일종의 컨트롤러가 있다

	DMA는 CPU가 자주 인터러브 당하는 것을 막아주며 로커버퍼에서 메모리로 읽어오는 작업을 대행해준다.
	이때 DMA는 byte단위가 아니라 블록이라는 큰 단위로 정보를 메모리에 읽어 CPU에 인터럽트를 발생시켜 작업완료를 알림

	
	