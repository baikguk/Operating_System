
운영체제의 정의:
	          하드웨어 윗단에 설치되는 소프트웨어
	          사용자, 다른 모든 소프트웨어와 하드웨어를 연결하는 소프트웨어 계층
		
	cf) 시스템 : 주로 기반, 틀이 되는 하드웨어를 명칭함
		 소프트웨어인 운영체제에 시스템이 붙는 이유 -> 컴퓨터의 기본적인 소프트웨어(틀)
	    
	소프트웨어는 실행되기 위해서는 메모리에 프로그램이 올라가야함 - > 전원 on-> 운영체제를 메모리에 올림

	운영체제는 규모가 크기 때문에 모두 메모리에 올라가면 공간 낭비
	 ->항상 필요한 부분만 전원이 켜질때 올림 -> 이때 메모리에 상주하는 운영체제 부분을 커널(kernel)이라 함

운영체제의 기능: 2가지 역할, 자원관리자, 보안

	2가지 역할 : 사용자 or 하드웨어 -> 자원을 효율적으로 관리하는 및 편리한 환경 제공
	 사용자: 편리한 환경 -> ex)인터페이스, 컴퓨터 및 프로그램을 독자적으로 사용하는 듯한 느낌
	 하드웨어: 사용자가 다루기 힘든 하드웨어 관리 -> ex) 파일 저장, 자원관리로 성능향상(형평성 또한 고려)

운영체제의 분류 : 단일작업(single tasking), 다중작업(multi tasking), 단일 사용자용 운영체제, 다중 사용자용 운영체제(서버)
		일괄처리 방식, 시분할 방식		

	단일 작업 : 한번에 하나의 프로그램만 실행 가능	

	다중 작업 : 동시에 여러 프로그램 실행 가능 ->ex) 여러 창을 띄움(다양한 프로그램이 CPU, 메모리를 공유)
			-> 실제로는 시분할 시스템으로 동시에 쓰는 느낌을 준것
					ㄴ CPU 작업시간을 여러 프로그램에 나눔

		다중 프로그래밍 시스템 : CPU와 달리 메모리의 경우 조금씩 메모리 공간을 보유하여 동시에 메모리 올라갈 수 있음
					ㄴ 이처럼 동시에 메모리에 프로그램을 올려 놓고 처리

		대화형 시스템 : 각 프로그램에 대한 키보드 입력결과를 바로 화면에 출력 (서버 또한 이에 해당)

	다중처리기 시스템 ( multi-processor system) : 여러 cpu 사용 but 여러개의 cpu관리에 따른 복잡한 메커니즘	

	일괄처리(batch processing) : 요청 작업을 일정량 모아 한번에 처리
					ㄴ 결과를 모든작업이 종료된 후에 얻음 -> 응답시간이 김

운영체제의 자원 관리 기능:

	하드웨어 자원 : CPU, 메모리, 입출력 장치, 보조기억 장치(하드디스크)
		 cpu 스케쥴링 : 어떤 프로그램에 CPU를 줄것 인가
		 메모리 관리 : 한정된 메모를 어떻게 나눌 것인가
		 파일관리 : 디스크에 파일을 어떻게 보관할 것인가
		 입출력관리 : 입출력장치와 컴퓨터 간에 정보를 어떻게 주고 받을 것인가
		 프로세스 관리 : 프로세스 생성 및 삭제, 자원할당및 반환, 프로세스간 협력

	CPU 스케쥴링 : 선입선출, 라운드 로빈, 우선순위
		선입선출 : 말 그대로 먼저 도착한 프로세스 마치고 이후 프로세스 실행
				ㄴ but 전체적인 성능 저하 될수도 ex) 짧은 시간이 필요한 프로세스가 대기시간이 길어지는 경우

		라운드 로빈 : 선입선출 기법의 단점을 보안한 기법
			CPU를 할당 받는 시간을 일정하게 고정함 
			-> 작업 시간이 긴 경우 정해지 시간이 지나면 CPU를 내놓고 CPU대기열 뒤에 위치함
				작업시간의 경우 밀리초 단위로 할당

		우선 순위 : 프로세스에 우선순위를 부여하여 CPU를 할당해줌
				-> 기다린 시간이 늘어날수록 우선순위를 높여 줌

	메모리 관리 : CPU가 직접 접근할 수 있는 컴퓨터 내부의 기억장치 -> 프로그램이 실행되려면 메모리에 올라가 있어야 함
			운영체제가 메모리 어느 부분에 어떤 프로그램을 사용하는 기억하기 위해 주소(address)를 사용

		관리 방식 : 고정분할(fixed partition), 가변분할(variable partition), 가상메모리(virtual memory)

		고정분할 : 하나의 프로그램이 적재될수 있게 미리 메모리를 나눔
			ㄴ 융통성이 없음, 분할 크기보다 큰 프로그램은 적재 못함, 메모리 공간 남음(내부조각(internal fragmentation)

		가변분할 : 매시점 프로그램 크기에 맞게 메모리를 분할해서 사용
			ㄴ 물리적 메모리보다 큰 프로그램은 탑재못함
			ㄴ 분할 크기와 개수가 동적을 변하기 때문에 기술적 관리 기법이 필요
			ㄴ 외부조각 발생 : 프로그램에 할당되지는 않았지만 크기가 작아 프로그램을 올리지 못하는 메모리 영역
				ex) 크기 100 A 실행 -> 크기 50 B실행 -> 크기100 종료 -> 크기 80 C실행 
				     ->20이 남음(실행되고 있는 B를 옮길 수 없음)  -> 크기 40 D 실행 -> C와 B사이의 메모리에 는 못올림
				     -> 이 메모리를 외부조각 -> 낭비됨

		가상메모리 :  물리적 메모리보다 큰 프로그램 실행 가능-> 가상메모리 크기에 따라 실행여부 결정됨
			     프로그램이 물리적메모리 주소가 아니라 0번지 부터 시작하는 가상메모리 주소를 가짐
			     운영체제가 가상메모리 주소를 물리적 메모리 주소로 매핑 하여 프로그램을 물리적메모리에 올림
			
			ex) 1기가 물리적 메모리
			 2기가 프로그램 실행 과정
				-> 현재 사용되는 부분만 물리적메모리에 올림, 나머지는 보조기억장치에 저장후 필요시 메모리에 적재
				->이때 사용되는 보조기억장치의 영역을 스왑 영역이라 함
				-> 가상 메모리 주소 공간은 페이지(page)라는 동일 크기의 단위로 나누어 물리메모리와 스왑에 저장						->해당 기법을 페이징이라 함

	주변장치 및 입출력 장치관리 : 인터럽트 매커니즘을 통해 관리

		인터럽트 : cpu 서비스가 필요할 때 신호를 발생해 서비스 요청	
			ㄴ cpu는 cpu 스케쥴링에 따라 작업을 수행하다가 인터럽트 발생되면 일을 멈추고(작업 상태 저장) 요청 서비스 수행	
		인터럽트 루틴 : 인터럽스 발생시 수행하는 작업을 정의한 프로그램 코드 -> 운영체제 커널내에 존재함

		컨트롤러 : 주변장치(하드웨어,메모리도 포함됨)는 각 장치마다 업무를 처리하기 위해 일종의 작은 CPU를 가지는 이를 뜻함
			ㄴ 해당 장치 업무에 대한 결과를 인터럽트 시켜 CPU에 보고